apiVersion: v1
kind: Namespace
metadata:
  name: vassilis

---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJ2YXNzaWxpc2Fjci5henVyZWNyLmlvIjp7InVzZXJuYW1lIjoidmFzc2lsaXNhY3IiLCJwYXNzd29yZCI6Ilh1ajhPaHcxU1VHWTkrb1RTamtYY0RZcURVczV0Tzc4IiwiYXV0aCI6ImRtRnpjMmxzYVhOaFkzSTZXSFZxT0U5b2R6RlRWVWRaT1N0dlZGTnFhMWhqUkZseFJGVnpOWFJQTnpnPSJ9fX0=
kind: Secret
metadata:
  name: docker-key
  namespace: vassilis
type: kubernetes.io/dockerconfigjson

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nginx
  namespace: vassilis
  labels:
    app: be
    coffee: esspresso
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-nginx
  template:
    metadata:
      labels:
        app: my-nginx
    spec:
      containers:
        - name: my-nginx
          image: vassilisacr.azurecr.io/nginx:1.21.6
          resources:
            limits:
              memory: "128Mi"
              cpu: "400m"
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /index.html
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 5
            failureThreshold: 1
          livenessProbe:
            httpGet:
              path: /index.html
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 5
            failureThreshold: 1
      imagePullSecrets:
        - name: docker-key

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: library
  namespace: vassilis
  labels:
    app: library
spec:
  replicas: 1
  selector:
    matchLabels:
      app: library
  template:
    metadata:
      labels:
        app: library
    spec:
      containers:
        - name: library
          image: vassilisacr.azurecr.io/library:v2
          resources:
            limits:
              memory: "1Gi"
              cpu: "400m"
          ports:
            - containerPort: 8080
              protocol: TCP
          # readinessProbe:
          #   httpGet:
          #     path: /api/library/1/books
          #     port: 8080
          #   initialDelaySeconds: 15
          #   periodSeconds: 5
          #   failureThreshold: 1
          # livenessProbe:
          #   httpGet:
          #     path: /api/library/1/books
          #     port: 8080
          #   initialDelaySeconds: 3
          #   periodSeconds: 5
          #   failureThreshold: 1
      imagePullSecrets:
        - name: docker-key

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: vassilis
spec:
  type: NodePort
  selector:
    app: my-nginx
  ports:
    - port: 8080
      targetPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: library
  namespace: vassilis
  labels:
    app.kubernetes.io/name: "library-service"
    app: "library"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app: "library"

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: ingress-library
  namespace: vassilis
spec:
  routes:
    - match: Host(`libraryvf.eastus.cloudapp.azure.com`)
      kind: Rule
      # middlewares:
      #   - name: library-stripprefix
      services:
        - name: library
          port: 80

--- 
# apiVersion: traefik.containo.us/v1alpha1
# kind: Middleware
# metadata:
#   name: library-stripprefix
#   namespace: vassilis
# spec:
#   stripPrefix:
#     prefixes:
#       - /library

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   annotations:
#     # certmanager.k8s.io/cluster-issuer: citrix
#     # kubernetes.io/ingress.class: traefik
#     # traefik.ingress.kubernetes.io/backend-entry-points: https
#     # traefik.ingress.kubernetes.io/frontend-entry-points: https
#     # traefik.ingress.kubernetes.io/redirect-entry-point: https
#     # traefik.ingress.kubernetes.io/redirect-permanent: "true"
#     traefik.ingress.kubernetes.io/router.entrypoints: web
#     # traefik.ingress.kubernetes.io/router.tls: "true"
#   name: my-ingress
#   namespace: vassilis
#   labels:
#     app.kubernetes.io/name: "my-ingress"
#     app.kubernetes.io/release: "my-ingress"

# spec:
#   rules:
#   - host: 13.68.176.132 
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: library
#             port:
#               number: 80